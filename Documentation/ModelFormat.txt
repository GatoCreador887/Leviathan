Extension: levmd

Header:
Contains information about the filetype and model format

objects:
contains all of the invidual model objects

in this format
o [TYPENAME] "[OBJECTNAME]" {

Please note that tabs can interfere with the contents so instead of tabs you should use spaces

contents go here, for example a list
    l [LISTNAME] {
        <t> This is handled as text line;
        ThisLine: is handled as variable line;
        Also = this_works(for more c++ style variable definition);
    }
    t [TEXTBLOCKNAME] {
        everything in here is handled as text
        processed line by line and tailing spaces and intendation should
        be ignored
    }
    list names are case sensitive so be carefully not to use modelfiles instead of ModelFiles
    
    in texture list before each texture it's type should be stated (NormalMap, BumpMap, LightMap, BlendMap)
    multiple normal textures (1 or 2) are supported and in this case they are blended together
    
    in flag list models type should be stated (and it needs to match list of textures and their types)
    NormalModel BumpModel (more to come)
    
    surface properties list is used to define various properties such as reflectivity and special coloring and rendering techniques
    
    IMPORTANT: be careful with comments, put them on their own lines to avoid them being on lines that don't know how to handle them
    ( some list lines and such should handle comments right way, some others may not, so please avoid bugs and put them on their own lines)
    
    model objects can have scripts, although not supported yet
    s scripts {
        this line is pretty much nothing but it is a must have
        also now you should only have 1 script body in an object
        inl type: "script" {
            name = MY_SCRIPT_NAME;
            body {
            AngelScript code here (ALMOST like c++) pointers are automatic handles "object@ handlename;"
            right now nothing gets called from here, so leave it empty, but in future this could be used to generate the texture on runtime
            @%};
            special end format which is required for the script body to end someday
        }
    }
}



#### Example file ####
FileType: Model;
Model-Format: Default;
Model-Name = "DefaultModel";

// --------------- HEADER ENDS AFTER THIS LINE ------------- //
objects {
    o Model "Cube" {
        t ModelFiles {
            MyModel.obj
        }
        t TextureFiles {
            NormalMap
            MyTexture.dds
        }
        t SomeText {
            this container contains
            text that is parsed line by line
        }
        l SurfaceProperties {
            SpecularPromille = 3200; 
            // quite a bit dimmer specular color than normal model value 0-10000 0%-100% //
        }
        l Flags {
            ModelType = NormalModel;
        }
        // this should be used carefully [NOT IMPLEMENTED YET] //
        s scripts {
            inl type: "script" {
                name = SCRIPT_NAME;
                body {
                    void Main(){
                        // script is AngelScript which is ALMOST like c++, no pointers but object handles object@ handletoobject = NULL; //
                        Print("Hello world from model's script component!");
                        return;
                    }
                @%}; // don't forget this or the file won't parse //
            }           
        }           
    }
    o Model "another modefllf" {
        l ModelFiles...
    
    }
}

// file end, not required but you can make read end before last line
-!-
so that this doesn't cause any errors or
anything




### EMPTY TEMPLATE MODEL FILE:
FileType: Model;
Model-Format: Default;
Model-Name = "";
objects {
    o Model "" {
        t ModelFiles {
            
        }
        t TextureFiles {
            
            
        }
        l SurfaceProperties {
            SpecularPromille = 10000;
            
        }
        l Flags {
            ModelType = ;
        }        
    }
}
