/*! \page tutorials Tutorials
    \tableofcontents
    \section gettingstartedsection Getting started
    See first: \subpage prerequisites and \subpage compiling_leviathan.
    
    Then you can move on to the tutorials.
    \note It is recommended that you work through the tutorials in order.
    
    \subsection beginnertutorials Beginner tutorials
    \subpage tutorial0


    \subpage tutorial1

    \subsection tutorials_link_toscripts Information about scripting

    \ref angelscript_main
    
*/

/*! \page tutorial0 Running the samples

\section tutorial0_linux On Linux

First go to the `build` folder and make sure everything is compiled by
running `cmake .. && make -j numberofcores`. If that succeeds you can
go to `build/bin` folder and run `./Pong` to run the sample pong
game. You can run tests with make like this (make sure to be in the
`build` folder): `cmake .. && make check -j numberofcores`.

\section tutorial0_windows On Windows

Start by opening `build/Leviathan.sln`. Then make sure you have
selected `RelWithDebInfo` as the active configuration (and make sure
arch is `x64`) in visual studio and then to run the Pong sample right
click the project and set as startup project then press the green
arrow in "Local Windows Debugger" or press F5. You can also run
LeviathanTest like this to verify that individual tests of the engine
run correctly.

\see \ref tutorial1

*/

/*! \page tutorial1 Getting started tutorial


    \section tutorial1recompiling Recompiling

    To save time you shouldn't run the setup script every time you
    have made changes. Instead on linux you should run `make -j
    numberofcores` in `project/build` folder and on Windows compile
    from visual studio.

    <b>Important</b>: when updating the scripts or assets of a game
    you must re-run cmake to make it copy the changed assets to the
    game binary folder. On Windows you should have cmd.exe (or
    powershell) open in the folder that has the solution file and run
    `cmake ..` in that when you change the assets (visual studio may
    ask you to reload the project you have open after running
    cmake. You should always reload the solution when asked). On linux
    you should combine the cmake command to make (it shouldn't do
    anything if nothing has changed) so in the build folder compile
    and run like this:
    \code{sh}
    cmake .. && make -j numberofcores && (cd bin && ./GameName)
    \endcode

    \section tutorial1setup Setup a new project using Leviathan
    \todo Create tutorials

*/

/*! \page prerequisites Prerequisites
    
\section prerequisite_software Required Software

\subsection prerequisite_software_common Common

These programs are needed for all platforms:

- [Ruby](http://ruby-lang.org) (It is recommended to use RubyInstaller on Windows)

- git

- svn

- mercurial

- cmake

- boost libraries 1.65 or newer is recommended but older versions may
work. (On **linux** the setup script will automatically use the package
manager to install this. For **Windows** see \ref
prerequisite_software_windows)

You can check whether a program is in PATH by opening a command 
prompt/terminal and running the program by typing its name. 
For example `ruby -v` this shouldn't print an error instead you should get something like this:
\code{sh}
ruby 2.4.1p111
\endcode

\subsection prerequisite_software_windows Windows

- Visual Studio 2017 Community (make sure to enable c++ support when installing)
- Visual c++ 2010 runtime (This is required for yasm according to ffmpeg setup guide)
- [Cygwin64](https://cygwin.com/install.html). When Cygwin asks for
  which packages to install make sure the at least the following are
  selected (and to save space don't install the debug variants):
  
  - coreutils
  - make
  - bash
  - tar (with gzip support)
 
  You can also optionally install git and svn with cygwin. But cmake
  has to be the Windows version, otherwise it won't properly generate
  visual studio project files.
  
  Then add `C:\cygwin64\bin` to the system
  path to make everything visible to the script


- After compiling Boost make sure to set `BOOST_ROOT` to the folder
where you compiled boost (for example `C:\projects\boost`).  And
compile shared versions and use 64 bit build.

Additional tip: when running `b2` make sure you specify the toolset,
bitness, type and the number of cores to use for compiling like this:
`.\b2 --toolset=msvc link=shared,static address-model=64 --with-system
--with-filesystem -j numberofcores`. Note: replace numberofcores with
how many cores you have for optimal compilation time. Also if you plan on
using boost with other projects as well remove the `--with-` options
to compile all of the components, which takes a long time.


\subsection prerequisite_software_linux Linux

- lsb_release

- GCC 7+ or clang 5+ (clang is untested, but probably works...)

\subsection prerequisite_software_gems Ruby Gems

- os
- colorize
- rubyzip
- sha3

These can be installed by running `gem install os colorize
rubyzip sha3`. Running with sudo is probably not required. If you get
errors installing the gems you should try updating your ruby version.

If you have trouble installing sha3 on windows: run `ridk install` and
try all of the options. After that your ruby native extension build
tools should be installed and the gem installation should work.


\subsection prerequisite_what_next Next
To compile Leviathan see \ref compiling_leviathan

\subsection prerequisite_troubleshooting Troubleshooting

\subsubsection prequisite_troubleshooting_linux_previous Linux previously installed libraries

Old versions of Ogre (pre 2.0) are known to cause issues compiling or
running Leviathan. So uninstall these old versions before starting if
possible, or you (might) have a bad time.

\subsubsection prequisite_troubleshooting_require Require file not found

Make sure you have installed all of the ruby gems.


*/

/*! \page compiling_leviathan Compiling Leviathan

\note Before the latest setup script the prerequisites section described manual
setup for all required libraries. But now that has been replaced with
the automatic setup script. If you want to read the old version
checkout an older commit of Leviathan,
`bba062c07a952c170a16c5f9e2608896d3d09821` for example.

Make sure you have installed \ref prerequisites first.

\section compiling_clone Cloning Leviathan

If you haven't used git to clone the Leviathan repository yet. Run
this command to clone Leviathan to a new folder:
\code{sh}
git clone https://bitbucket.org/hhyyrylainen/leviathan.git
cd leviathan
git submodule init
\endcode

Windows tip: shift right-click in a folder and select "Open command
prompt here" or "Open powershell here" to open a cmd window to the
folder where you want to build Leviathan. If building fails you should
try a path without a space in it.

\section compiling_script Running Setup

Now move to the Leviathan folder and run the setup script:
\code{sh}
cd leviathan
ruby Setup.rb
\endcode

If the script runs correctly you can move to the next
section. Otherwise see \ref compile_troubleshooting.


\section compile_done Done

You can run tests on linux by running `make check -j numberofcores` in
the build folder. And on Windows by running the LeviathanTest project
in visual studio debugger. Note: when you open `build/Leviathan.sln` make sure
you select `RelWithDebInfo` as the active configuration as the debug
builds are known to be broken very often.

For a tutorial on what to do next see \ref tutorial0.
Now, if the samples runs correctly, you are all set to start your own project.

\see \ref tutorials

\section compile_troubleshooting Troubleshooting

Here are some common fixes for issues you might have with the setup script.

If none of these work please open an issue here: [Leviathan
repository](https://bitbucket.org/hhyyrylainen/leviathan/issues).

\subsection troubleshooting_submodules Submodules out of date

If you have pulled updates or changed branches your downloaded
submodules might be out of date. To fix this run:

\code{sh}
cd leviathan
git submodule update
\endcode


\subsection troubleshooting_missing_pr Missing command `pr`

If you get an error about `pr` being an unkown command or missing try
installing Cygwin64 'coreutils' package. If that doesn't work either 
install the default set of cygwin packages.

\subsection troubleshooting_ffmpeg_line_ends  Incorrect ffmpeg makefile line endings

If you get an error "missing separator. Stop" in common.mak when
trying to build ffmpeg on windows, this is probably caused by line
endings being incorrect.

To fix these change to the FFMPEG FOLDER and run these commands to fix the line endings:
\code{sh}
git config core.autocrlf false
\endcode
Delete all files except ".git" folder. And then:
\code{sh}
git checkout .
\endcode

Warning: this will discard all changes in the git repo this is ran in,
so make sure you are in the right folder.


It is also possible to globally change the autocrlf setting but that
isn't recommended to avoid accidentally committing windows line
endings.


\subsection troubleshooting_ffmpeg Issues compiling ffmpeg

First, make sure that you are using the standard Windows command
prompt. Using a MinGW shell or equivalent is known to cause
issues. You may need to delete the ffmpeg folder after this to make
sure that there are no cached values or other things messing things
up.


Then make sure that nothing is overriding the programs in cygwin. You
should start by making sure cygwin is the first thing in PATH. And
then that the specific programs are from cygwin. This can be done by
renaming the executables in cygwin/bin, for example renaming `awk.exe`
or `make.exe` to `testawk.exe` and then verifying that the setup
script starts complaining about missing that specific program. If it
doesn't start complaining then this confirms that something is messing
with your PATH and overriding the cygwin tools.  Either delete the
offending things (MSYS, MinGW) or remove them from PATH (and make sure
once again that you are using plain `cmd.exe` to run the setup and not
some other shell).

\subsubsection troubleshoothing_ffmpeg_more ffmpeg build is still failing

For other ffmpeg building issues see these guides:
[windows guide](https://trac.ffmpeg.org/wiki/CompilationGuide/MSVC),
[all guides](https://trac.ffmpeg.org/wiki/CompilationGuide)


\subsubsection troubleshoothing_no_files_found LeviathanTest or sample games don't find files

Make sure you are running them in the correct directory
(`build/bin`). On Windows check the debugging startup directory in
Visual Studio project settings.

\section compile_manually Manually Compiling

This is very much not recommended as the dependencies need to be built
with complex options and additional dependencies. Then the resulting
files need to be installed into `leviathan/build/ThirdParty`. Then
running the main cmake configure should succeed and you can try
building. You will still need ruby for generating some C++ files so
you can't skip the ruby dependency even with trying to build manually.

For a good starting point see the note at the top of this page about older setup
instructions.

The old instructions will most likely not work anymore but provide a
good starting point for building some of the Leviathan dependencies.


*/