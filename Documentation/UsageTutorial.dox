/*! \page tutorials Tutorials index
    \tableofcontents
    \section gettingstartedsection Getting started
    See first: \subpage prerequisites.
    
    Then you can move on to the tutorials.
    \note It is recommended that you work through the tutorials in order.
    
    \subsection beginnertutorials Beginner tutorials
    \subpage tutorial1
    
*/

/*! \page tutorial1 Getting started tutorial
    \todo Create tutorials
*/

/*! \page prerequisites Prerequisites
    
\section prerequisites_universal Building Leviathan

\note Linux instructions provided here may not be complete

\note Only supported configuration on linux is RelWithDebInfo (and Release), Debug configuration can potentially
crash immediately and not work.

Before starting make sure you have git, mercurial and svn version control systems installed and a recent cmake version.
You will of course need build tools for your system, gcc is recommended for linux users and the latest (2013) community
edition of visual studio for windows users. On windows with older visual studio versions you need to install direct x sdk.
On windows you will also need python2.
(To make boost be found correctly by cmake you might have to run ./b2 install and then copy all libraries to a lib folder
in the distribution root)
(Also if the names start with lib "libboost_system-vc120-mt-1_57.lib" it may be required to remove the lib prefix
Bulk rename and remove first 3 letters to make boost be found correctly)

You will also need to have a recent version of boost libraries (and their development packages) version 1.53 and up should
work. If you don't have boost installed you might want to search how to install it for your system.

\subsection downloading_libs Downloading Libraries
First create a folder for the projects (Here I use `C:\projects` on windows and `~/Projects` on linux)

Then open a cmd/terminal to the folder and run these commands to get all the required dependencies

    git clone https://github.com/MADEAPPS/newton-dynamics.git

You will need to manually download AngelScript sdk version 2.29.2 and unzip it to your build folder.
I usually rename the sdk folder to something like AngelScript_2_30.

If you want to use Leap Motion controller you need to sign up for their sdk and unzip it to the Leap folder in the
leviathan folder we will create in the next section.

Install SFML 2 to your system. On linux use your package manager. On windows download an installer from here:
`http://www.sfml-dev.org/download.php`
Download the 32 bit version as currently 64 bit builds aren't tested on windows.
Unzip the SFML 2.2 folder to `C:/Program Files(x86)/` (or some other folder)
You may need to set the environment variable SFML_ROOT to the folder you extracted.
(On windows I ended up moving the SFML-2.2 folder to the projects folder and setting the environment variable `SFML_ROOT` to
`C:\projects\SFML-2.2`)

Next up CEGUI. First clone the repository from
     hg clone https://bitbucket.org/cegui/cegui
And the dependencies (on windows, on linux use your package manager to install them)
(On linux you need to read the output from configuring CEGUI cmake build and install the packages that are missing)
The version you are using should be the default branch as currently that is the only one supporting Ogre 2.0.
    hg checkout default

The final dependency, Ogre, is a bit more involved.

The way I like to do it is create a folder called OgreBuild.
Then copy the following into a file CMakeLists.txt in the OgreBuild folder

\code
cmake_minimum_required(VERSION 2.8.11)

# Dependencies first
add_subdirectory("Dependencies")

# actual ogre
add_subdirectory("Ogre")

# own fork for developing
#add_subdirectory("ogre-fork")
\endcode

After creating the file get a link to Ogre from top right corner on this page https://bitbucket.org/sinbad/ogre

It should look like this: `https://name@bitbucket.org/sinbad/ogre`
And then run
    hg clone https://name@bitbucket.org/sinbad/ogre Ogre
\note On windows you might be using TortoiseHg in which case you should create folder 'Ogre', right click it and choose
mercurial clone.

I had much trouble cloning the repository so I did the following:
      mkdir Ogre
      hg init
      hg pull -r 1 https://name@bitbucket.org/sinbad/ogre
and then gradually increased the value after -r to avoid getting `abort: connection ended unexpectedly`


Other solution: clone the repository on linux and move it to a location windows can access and then clone from that local
copy on windows

The required version should be in v2-0 branch change to it
    cd Ogre
    hg checkout v2-0

Before building you need to download ogre dependencies, see 
`http://www.ogre3d.org/tikiwiki/tiki-index.php?page=Prerequisites` for details.
On linux you can use your package manager to install required libraries. On windows clone this mercurial repository
to a folder called Dependencies. On the command line like this

      hg clone https://name@bitbucket.org/cabalistic/ogredeps Dependencies

\note https://bitbucket.org/cabalistic/ogredeps Remember to get your own link!


Or with tortoiseHg like in previous step.
Linux: you will need to install these packages + devel versions of them and you can leave the dependencies folder blank.

If you intent to create a release that can create error reports you need to install google breakpad.
If you don't want to do that you need to pass `-DUSE_BREAKPAD=OFF` when configuring leviathan cmake.
First step in our projects folder run
      svn checkout http://google-breakpad.googlecode.com/svn/trunk/ google-breakpad
At this point make sure that running
   python --version
returns 2.x otherwise building breakpad will not work on windows.

Then it's time to compile the dependencies

\noteOn windows all the resulting DLL files from all the build steps need to be copied to `leviathan/bin/ThirdParty` for
debugging and distribution packages to work correctly.

\section compile_all_deps Compiling Dependencies

\subsection Newton_compile Newton
To compile newton go to the newton folder called 'newton-dynamics/packages/projects/' and on windows open the sln file
in visualStudio_2013_dll and on linux open posix64 and run make.
Then copy the resulting newton.so or newton.dll (It's easiest to find by searching) to `leviathan/Newton/lib`

\subsection AngelScript_compile AngelScript
After unzipping angelscript open the proper project files in `sdk/angelscript/projects/gnuc` or 
`sdk/angelscript/projects/msvc2013` build the static configuration which creates a .a file on linux and .lib on windows.
On windows before trying to link leviathan to AngelScript you need to make sure that you compiled AngelScript with the right
runtime library. To check this right click the angelscript project in visual studio and select properties and from the pop-up
window browse to `C/C++/Code Generation` and the field `Runtime Library` and verify that it is set to `Multi-threaded DLL (/MD)`.
Next click apply/use and switch the configuration from the top left from Release to Debug. And now verify that the setting is
now `Multi-threaded Debug DLL (/MDd)` finally click ok and build both the debug and release configurations. Now the resulting
libraries should be compatible with default leviathan build settings.
Then copy the resulting file in `angelscript/lib/angelscript.lib` or `angelscript/lib/angelscript.a` (and optionally the
debug version on windows) to `leviathan/AngelScript/lib` (you may need to create the target folder if it doesn't exist)

\subsection Ogre_compile Ogre
To compile Ogre go to the ogre folder and run these commands
   mkdir build
   cd build
On Windows:
   cmake .. -DCMAKE_INSTALL_PREFIX=sdk
On Linux:
   cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo

then run make or on windows open the .sln file.
Windows: After compiling create an environment variable `OGRE_HOME` pointing to the sdk folder `OgreBuild/Ogre/sdk`
\note You may also need to create a variable OIS_HOME pointing to the same folder,
mine is set to `C:/projects/OgreBuild/build/sdk`


On linux run
   sudo make install
To install Ogre so that it can be found by leviathan.

\subsection CEGUI_compile CEGUI
To compile CEGUI go to first the CEGUI dependencies folder (on windows, on linux use your package manager to install the
dependencies and their devel versions)
mkdir build
cd build
cmake .. -DCEGUI_BUILD_PYTHON_MODULES=OFF
Then open the solution and build at least the Release configuration and Debug optionally also compile RelWithDebInfo if you
want to debug the release builds.
(If you want to use CEED you need to set -DCEGUI_BUILD_PYTHON_MODULES=ON)
(If you are using a new boost release 1.57 and up you may need to install cmake 3.2 to have a up to date FindBoost.cmake)
Then after building the windows dependencies copy the folder
cegui-dependencies/build/dependencies to cegui/

Then both on windows and linux go to the main CEGUI folder and
mkdir build
cd build
cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo
On windows again compile all the required configurations.
On linux you can only have debug or release. It is recommended to compile RelWithDebInfo, though, so you can debug and do
release versions.
make

And then on windows run the install configuration to install CEGUI so that leviathan can find it.
On linux run
sudo make install

\subsection breakpad_compile Breakpad
To compile google breakpad in the top level breakpad folder run
Linux: run
       ./configure && make
in the main breakpad directory
Windows:
    src\tools\gyp\gyp.bat src\client\windows\breakpad_client.gyp
\note Make sure you have python 2 in use, python --version to check


After running the command on windows open the resulting sln file in src/client/windows and build it
in debug and release configurations.

If you get gyp: Cycles in .gyp file dependency graph detected see https://code.google.com/p/google-breakpad/issues/detail?id=406
or just try running this command instead:
   src\tools\gyp\gyp.bat --no-circular-check src\client\windows\breakpad_client.gyp

To process crash reports you need to compile the tools separately. On linux they are already compiled but on windows
you need to run src/tools/windows/refrech_binaries.bat
\note Also you might need to do this, for me, though, it created just an empty project
src\tools\gyp\gyp.bat src\tools\tools.gyp
Then compile the solution in src/tools/tools.sln
In release configuration.


You cannot compile the processor on windows so you need a linux installation to compile the processor for
processing the user-submitted crash reports.
To make the resulting libraries the right type you need to change all the projects to use Multi-threaded DLL (/MD) as in
before we have modified a project to do this. After this make sure you have compiled a new version to avoid linker errors.

\subsection Leviathan_compile Leviathan
Next up we will actually compile Leviathan.
Get the code from bitbucket: `https://bitbucket.org/hhyyrylainen/leviathan` copy the link from the top right corner.
It should look like this: `https://username@bitbucket.org/hhyyrylainen/leviathan.git`
then run (with your link from the previous step)
     git clone https://username@bitbucket.org/hhyyrylainen/leviathan.git

If you are planning to contribute you will want to fork the repository on the website.

You will want to checkout a recent version. Currently most recent versions are in the branch Networking, but in
the future it might be in the master branch.

run this in the new 'leviathan' folder

    git pull origin Networking
    git checkout Networking

And maybe in the future

    (git checkout master)

Copy the path to your breakpad main folder, mine is `C:\projects\google-breakpad`
and put it in the cmake command, if you are using breakpad.

You will also need to copy the glm directory if you are on windows.
Copy the path to cegui-dependencies\src\glm-0.9.4.5 folder or other version cegui-dependencies comes with.
Mine is C:\projects\cegui-dependencies\src\glm-0.9.4.5

Then setup a build folder

     mkdir build
     cd build
     cmake .. -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=Install -DBREAKPAD_DIR=C:\projects\google-breakpad -DGLM_BASE_DIR=C:\projects\cegui-dependencies\src\glm-0.9.4.5

\note If not using breakpad add -DUSE_BREAKPAD=OFF to the above command. Also for local debugging it's better to keep breakpad off

If cmake succeeds you have all the dependencies compiled and installed properly. If it fails you might have missed a
dependency or cmake failed to find the install folder.

Now we can build the project.
On windows open the generated .sln file. On linux run 'make' in the build folder.
If the build succeeds the binaries will be placed in `build/bin/` you can run the sample Pong(.exe) from the folder or
from visual studio.
\note Currently you cannot start a server from the Pong gui so you need to run PongServer(.exe) separately


For the one last step you will need to set the environment variable `LEVIATHAN_HOME` to the root 'leviathan' folder.
On windows search online 'how to set environment variable' on linux add the definition to your bash setup file 
(possibly called '.bashrc')
\code{.sh}
LEVIATHAN_HOME=/home/hhyyrylainen/Projects/leviathan

export PATH LEVIATHAN_HOME
\endcode

\note This step is required because the .lib files are in different folders than the dlls. The cmake file copy could be changed to
look for the dlls automatically

This step can be skipped on linux

Just one last thing: make sure you have copied all the dlls like CEGUIBase-9999.dll and OgreMain.dll to leviathan/bin/ThirdParty
Create the folder if it doesn't exist already.
If you haven't already go to these locations to get the files:
(you should copy all the dlls to avoid issues even if some are unnecessary)
(Also you should copy release versions over debug versions if they have same names like cg.dll)
      C:\Program Files (x86)\cegui\bin
      C:\projects\newton-dynamics\coreLibrary_300\projects\windows\project_vs2013_dll\Win32\newton\Debug
      C:\projects\newton-dynamics\coreLibrary_300\projects\windows\project_vs2013_dll\Win32\newton\release
      C:\projects\SFML-2.2\bin
      C:\projects\cegui-dependencies\build\dependencies\bin
Note: you may want to copy the OgreMeshUpgrader.exe and OgreXMLConverter.exe to leviathan/bin from this next location.
C:\projects\OgreBuild\build\sdk\bin\Release

When debugging you will want to set cmake .. -DCOPY_DEBUG_LIBS=ON to copy debug libs. Turn this back off when doing releases
or the debug versions (might) end up in the distribution package otherwise.


(Your paths may vary if you installed projects in different folders)

\subsection compile_done Done
Now, if the samples runs correctly, you are all set to start your own project.

For a tutorial on what to do next see \ref tutorial1.
*/