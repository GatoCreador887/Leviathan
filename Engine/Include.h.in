#ifndef LEVIATHAN_INCLUDE
#define LEVIATHAN_INCLUDE

#define L_VLD_STATE @L_VLD_STATE@
#if L_VLD_STATE == 0
#undef L_VLD_STATE
#endif
#ifdef L_VLD_STATE
// define actual macro
#define LEVIATHAN_USES_VLD
#endif

#ifndef __cplusplus
#error C++ compiler required!
#endif

#include <stdio.h>

// we need to disable this warning to stop stdint and instsafe causing errors //
#pragma warning (disable: 4005)

// C RunTime Header Files
#include <stdlib.h>
#include <malloc.h>
#include <memory.h>
#include <wchar.h>
#include <math.h>
#include <assert.h>

#ifdef _WIN32
#include <SDKDDKVer.h>

#endif

// some special compiler settings //
#ifdef ANALYZEBUILD
// this stop code analyze from breaking //
#define _AFXDLL
#pragma warning (disable:6387)
#include <afxcontrolbars.h>
#pragma warning (default:6387)
#endif

// core libRocket (this is before windows headers to fix things) //
#include <Rocket/Core.h>

#ifdef _WIN32
#include <Windows.h>
#include <Windowsx.h>
#include <wincodec.h>
#else
// For making SIGINT work as debug break on linux //
#include <signal.h>
#endif

// Might have to only include this on linux //
#include <limits>

#include <iostream>
#include <fstream>
#include <sstream>
#include <map>
#include <list>
#include <algorithm>

#include <string>
#include <time.h>
#include <ctime>

#include <vector>
#include <list>
#include <set>
#include <regex>

#ifdef _WIN32
#include <initguid.h>
#include <shlobj.h>
#else
// For using SIGINT as breakpoints //
	 #include <signal.h>
#endif

// common ogre files //
#include <OgreCamera.h>
#include <OgreEntity.h>
#include <OgreLogManager.h>
#include <OgreRoot.h>
#include <OgreViewport.h>
#include <OgreSceneManager.h>
#include <OgreRenderWindow.h>
#include <OgreConfigFile.h>

// pragma include libraries

#ifdef ENGINE_EXPORTS
#ifdef _WIN32
	#ifdef _DEBUG
	// debug versions //

	#pragma comment(lib, "angelscriptd.lib")
	#pragma comment(lib, "Leapd.lib")
	
	#pragma comment(lib, "OgreMain_d.lib")
	#pragma comment(lib, "OgreOverlay_d.lib")
	#pragma comment(lib, "OgrePaging_d.lib")
	#pragma comment(lib, "OgreTerrain_d.lib")
	#pragma comment(lib, "OgreRTShaderSystem_d.lib")
	#pragma comment(lib, "Plugin_CgProgramManager_d.lib")
	#pragma comment(lib, "Plugin_OctreeZone_d.lib")
	#pragma comment(lib, "Plugin_ParticleFX_d.lib")
	#pragma comment(lib, "RenderSystem_Direct3D11_d.lib")
	#pragma comment(lib, "RenderSystem_GL_d.lib")
	#pragma comment(lib, "RenderSystem_Direct3D11_d.lib")
	
	#pragma comment(lib, "OIS_d.lib")
	#pragma comment(lib, "RocketCore_d.lib")
	#pragma comment(lib, "RocketControls_d.lib")
	#pragma comment(lib, "RocketDebugger_d.lib")
	#pragma comment(lib, "newton_d.lib")

	#pragma comment(lib, "sfml-audio-d.lib")
	#pragma comment(lib, "sfml-network-d.lib")
	#else
	// release libraries
	#pragma comment(lib, "angelscript.lib")
	#pragma comment(lib, "Leap.lib")

	#pragma comment(lib, "OgreMain.lib")
	#pragma comment(lib, "OgreOverlay.lib")
	#pragma comment(lib, "OgrePaging.lib")
	#pragma comment(lib, "OgreTerrain.lib")
	#pragma comment(lib, "OgreRTShaderSystem.lib")
	#pragma comment(lib, "Plugin_CgProgramManager.lib")
	#pragma comment(lib, "Plugin_OctreeZone.lib")
	#pragma comment(lib, "Plugin_ParticleFX.lib")
	#pragma comment(lib, "RenderSystem_Direct3D11.lib")
	#pragma comment(lib, "RenderSystem_GL.lib")
	#pragma comment(lib, "RenderSystem_Direct3D11.lib")

	#pragma comment(lib, "OIS.lib")
	#pragma comment(lib, "RocketCore.lib")
	#pragma comment(lib, "RocketControls.lib")
	#pragma comment(lib, "RocketDebugger.lib")
	#pragma comment(lib, "newton.lib")

	#pragma comment(lib, "sfml-audio.lib")
	#pragma comment(lib, "sfml-network.lib")
	#endif
#else
	// Linux libraries
	#ifdef _DEBUG
	// debug versions //

	#pragma comment(lib, "libAngelscript.a")
	#pragma comment(lib, "libLeap.so")
	
	#pragma comment(lib, "libOgreMain_d.so")
	#pragma comment(lib, "libOgreOverlay_d.so")
	#pragma comment(lib, "libOgrePaging_d.so")
	#pragma comment(lib, "libOgreTerrain_d.so")
	#pragma comment(lib, "libOgreRTShaderSystem_d.so")
	#pragma comment(lib, "Plugin_CgProgramManager_d.so")
	#pragma comment(lib, "Plugin_OctreeZone_d.so")
	#pragma comment(lib, "Plugin_ParticleFX_d.so")
	#pragma comment(lib, "RenderSystem_Direct3D11_d.so")
	#pragma comment(lib, "RenderSystem_GL_d.so")
	#pragma comment(lib, "RenderSystem_Direct3D11_d.so")
	
	#pragma comment(lib, "libOIS_d.so")
	#pragma comment(lib, "libRocketCore_d.so")
	#pragma comment(lib, "libRocketControls_d.so")
	#pragma comment(lib, "libRocketDebugger_d.so")
	#pragma comment(lib, "libNewton.so")

	#pragma comment(lib, "libsfml-audio.so")
	#pragma comment(lib, "libsfml-network.so")
	#else
	// release libraries
	#pragma comment(lib, "libAngelscript.a")
	#pragma comment(lib, "libLeap.so")
	
	#pragma comment(lib, "libOgreMain.so")
	#pragma comment(lib, "libOgreOverlay.so")
	#pragma comment(lib, "libOgrePaging.so")
	#pragma comment(lib, "libOgreTerrain.so")
	#pragma comment(lib, "libOgreRTShaderSystem.so")
	#pragma comment(lib, "Plugin_CgProgramManager.so")
	#pragma comment(lib, "Plugin_OctreeZone.so")
	#pragma comment(lib, "Plugin_ParticleFX.so")
	#pragma comment(lib, "RenderSystem_Direct3D11.so")
	#pragma comment(lib, "RenderSystem_GL.so")
	#pragma comment(lib, "RenderSystem_Direct3D11.so")
	
	#pragma comment(lib, "libOIS.so")
	#pragma comment(lib, "libRocketCore.so")
	#pragma comment(lib, "libRocketControls.so")
	#pragma comment(lib, "libRocketDebugger.so")
	#pragma comment(lib, "libNewton.so")

	#pragma comment(lib, "libsfml-audio.so")
	#pragma comment(lib, "libsfml-network.so")
	#endif

		
	
#endif
#else
// include engine lib
#ifdef _WIN32
	#ifdef _DEBUG
	#pragma comment(lib, "EngineD.lib")
	// Also link the Newton library because it seems to be needed for some things //
	#pragma comment(lib, "newton_d.lib")
	#else
	#pragma comment(lib, "Engine.lib")
	// Also link the Newton library because it seems to be needed for some things //
	#pragma comment(lib, "newton.lib")
	#endif
#else
// Linux things
	#ifdef _DEBUG
	#pragma comment(lib, "EngineD.so")
	// Also link the Newton library because it seems to be needed for some things //
	#pragma comment(lib, "libnewton.so")
	#else
	#pragma comment(lib, "Engine.so")
	// Also link the Newton library because it seems to be needed for some things //
	#pragma comment(lib, "newton.so")
	#endif
#endif

#endif // ENGINE_EXPORTS

using namespace std;
// -------------------------- //
#define CLASSNAME	L"LeviathanWindow"

#define LEVIATHAN_VERSION @LEVIATHAN_VERSION@
#define LEVIATHAN_VERSIONS @LEVIATHAN_VERSIONS@
#define LEVIATHAN_VERSION_ANSIS @LEVIATHAN_VERSION_ANSIS@


#define VERSION		LEVIATHAN_VERSION
#define VERSIONS	LEVIATHAN_VERSIONS

#define LEVIATHAN

#define PI 3.14159265f
#define DEGREES_TO_RADIANS  PI/180
#define EPSILON		0.00000001f
#define VAL_NOUPDATE	-1333678
#define OBJECT_SMOOTH	4
#define SHADER_DEBUG 1

// Define common types that might be missing //
#ifndef _WIN32
#include <inttypes.h>
#include <float.h>
typedef unsigned int UINT;
typedef long LONG;
typedef int64_t __int64;
typedef int32_t __int32;
typedef unsigned char BYTE;



#define __assume(cond) do { if (!(cond)) __builtin_unreachable(); } while (0)

#define FORCE_INLINE __attribute__((always_inline))
//#define FORCE_INLINE
#define THROWS
#else

#define FORCE_INLINE	__forceinline
#define THROWS		throw(...)
#endif


#define LEVIATHAN_UNIT_SCALE		1000
// throw on Error message //
//#define THROW_ON_PRINTERROR

#ifdef _DEBUG
	#ifdef _MSC_VER
		#define DEBUG_BREAK __debugbreak();
	#else
		#ifdef __GNUC__
		// We are on linux (and this *should* work)
			#define DEBUG_BREAK raise(SIGINT)
		#else
		#error "Debug break won't work"
		#endif
	#endif
#else
	// Release mode
	#define DEBUG_BREAK
#endif //_DEBUG


#ifndef DEBUG_OUTPUT
#if defined( DEBUG ) || defined( _DEBUG )
#define DEBUG_OUTPUT(s)	{Logger::SendDebugMessage(s);}
#else
#define DEBUG_OUTPUT(s)   {}
#endif //DEBUG || _DEBUG
#endif

#ifndef DEBUG_OUTPUT_AUTO
#if defined( DEBUG ) || defined( _DEBUG )
#define DEBUG_OUTPUT_AUTO(s)	{Logger::SendDebugMessage(wstring(L"[INFO] "+s+L"\n"));}
#else
#define DEBUG_OUTPUT_AUTO(s)   {}
#endif //DEBUG || _DEBUG
#endif

#ifndef DEBUG_OUTPUT_AUTOPLAINTEXT
#if defined( DEBUG ) || defined( _DEBUG )
#define DEBUG_OUTPUT_AUTOPLAINTEXT(s)	{Logger::SendDebugMessage(wstring(L"[INFO] " L#s L"\n"));}
#else
#define DEBUG_OUTPUT_AUTOPLAINTEXT(s)   {}
#endif //DEBUG || _DEBUG
#endif


#ifndef DLLEXPORT
#ifdef ENGINE_EXPORTS
#ifdef _WIN32
#define DLLEXPORT  	 __declspec( dllexport )
#else
// This might not be needed for gcc
#define DLLEXPORT	__attribute__ ((visibility ("default")))
#endif
#else
#define DLLEXPORT
#endif // ENGINE_EXPORTS
#endif


#ifdef _DEBUG
#define MONITOR_FUNCTION_TIME_FSTART wstring functiontimemonitorname = __WFUNCTION__ L" time monitor"; TimingMonitor::StartTiming(functiontimemonitorname);
#else
#define MONITOR_FUNCTION_TIME_FSTART {}
#endif
#ifdef _DEBUG
#define MONITOR_FUNCTION_TIME_FSTOP {TimingMonitor::StopTiming(functiontimemonitorname, true);}
#else
#define MONITOR_FUNCTION_TIME_FSTOP {}
#endif

#define SAFE_RELEASE( x ) {if(x){(x)->Release();(x)=NULL;}}
#define SAFE_RELEASEDEL( x ) {if(x){(x)->Release();delete (x);(x)=NULL;}}
#define SAFE_DELETE( x ) {if(x){delete (x);(x)=NULL;}}
#define SAFE_DELETE_ARRAY( x ) {if(x){delete[] (x);(x)=NULL;}}
#define EXISTS( x ) {( (x) != NULL )}

#define SAFE_RELEASE_VECTOR(x) {for(auto iter = x.begin(); iter != x.end(); ++iter) if(*iter){ (*iter)->Release(); } x.clear();}

#define ARR_INDEX_CHECK( x, y) if(((x) >= 0 ) && ((size_t)(x) < (y)))
#define ARR_INDEX_CHECKINV( x, y) if(!(((x) >= 0 ) && ((size_t)(x) < (y))))
#define VECTOR_LAST(x) (x).at((x).size()-1)
#define VECTOR_LASTP(x) (x)->at((x)->size()-1)
#define CLASS_ALLOC_CHECK(x) if(!(x)){Logger::Get()->Error(L"008");return false;}

#define FORCE_POSITIVE(x) {if((x) < 0){ (x)*=-1; }}
#define FORCE_POSITIVEF(x) {if((x) < 0){ (x)*=-1.0f; }}

#ifdef _WIN32
#define WIDEN2(x) L ## x
#else
// TODO: make this not kill performance
#define WIDEN2(x) Convert::StringToWstring(x)
#endif
#define WIDEN(x) WIDEN2(x)
#define __WFILE__ WIDEN(__FILE__)
#define __WFUNCTION__ WIDEN(__FUNCTION__)

#define SSLINE2(x) #x
#define SSLINE(x) SSLINE2(x)
#define __SLINE__ SSLINE(__LINE__)


#define __SWLINE__ WIDEN(__SLINE__)

#define STRINGGIFY2(x) #x
#define STRINGGIFY(x) STRINGGIFY2(x)
#define WSTRINGIFY(x) WIDEN(STRINGGIFY(x))

#define __WDATE__ WIDEN(__DATE__)
#define __WTIME__ WIDEN(__TIME__)
#define __WFUNCSIG__ WIDEN(__FUNCSIG__)

#define SAFE_DELETE_VECTOR(x) while((x).size() != 0){if((x)[0]){delete (x)[0];}(x).erase((x).begin());}

#define STDCONTAINERERASELAST_PTR(x) x->erase(x->begin()+x->size()-1)
#define STDCONTAINERERASELAST(x) x.erase(x.begin()+x.size()-1)

#define QUICK_ERROR_MESSAGE {Logger::Get()->Error((L"Undocumented error: " __WFILE__ L" function: "__WFUNCTION__ L" line: " __SWLINE__ ), true);}
#define QUICK_MEMORY_ERROR_MESSAGE {Logger::Get()->Error((L"Out of memory error from: " __WFILE__ L" function: "__WFUNCTION__), true);}



namespace Leviathan{
	

	class Object;
	

	class EngineComponent;
}

//typedef std::vector vector;

#include "Common/ErrorTypes.h"

#include "Logger.h"

#include "Common/Types.h"
#include "Common/Misc.h"
#include "Math/CommonMath.h"
#include "Utility/Convert.h"

#include "Handlers/IDFactory.h"
// exceptions //
#include "Exceptions/ExceptionBase.h"

#include "Statistics/TimingMonitor.h"
// speed up compile times with leap //
#include "Leap.h"
// OIS compile speed up //
#include <OISMouse.h>
#include <OISKeyboard.h>
#include <OISJoyStick.h>
#include <OISInputManager.h>

// angelscript //
// AngelAddons use std style names
#define AS_USE_STLNAMES     1

//#define ANGELSCRIPT_DLL_LIBRARY_IMPORT
#include "angelscript.h"

#endif
