GUIBaseFile = "PongMenu.layout";
GUIAnimations = [["PongMenus.anims"]];


// ------------------ Templates for GUI objects ------------------ //
template<GCollectName, CEGUITargetWind, GCollectEnabled> PGCTemplate: 
    o GuiCollection "GCollectName"{
        l params{
            Enabled = GCollectEnabled;
            AutoTarget = "CEGUITargetWind";
        }
    }
    
// Close button support for all kinds of windows //
template<NameOfTarget, CollectionToGoTo, CollectionToDisable> GUIFrameWindowCloseButtonDefault: 
    o GuiObject "NameOfTarget"{
        s{
            [@Listener="OnCloseClicked"]
            bool GoBackToMainMenu(GuiObject@ instance){
                
                // Go back to the main menu //
                instance.GetOwningManager().SetCollectionState("CollectionToGoTo", true);
                instance.GetOwningManager().SetCollectionState("CollectionToDisable", false);
                return true;
            }
        @%};
    }
    
// Back button for menus //
template<NameOfTarget, CollectionToGoTo, CollectionToDisable> GUIMenuButtonToCollection: 
    o GuiObject "NameOfTarget"{
        s{
            [@Listener="OnClick"]
            bool GoToCollection(GuiObject@ instance){
                
                // Go back to the specified collection //
                instance.GetOwningManager().SetCollectionState("CollectionToGoTo", true);
                instance.GetOwningManager().SetCollectionState("CollectionToDisable", false);
                return true;
            }
        @%};
    }


// ------------------ Non-functional objects ------------------ //
// This keeps the GUI always on //
o GuiCollection "OnKeeper"{
    l params{
        Enabled = true;
        KeepsGUIOn = true;
    }
}

// ------------------ MenuWindow ------------------ //
template<> PGCTemplate<MenuWindow, "MenuWindow", true>

// ------------------ Main menu objects ------------------ //
o GuiCollection "TopLevelMenu"{
    l params{
        Enabled = true;
        AutoTarget = "MenuWindow/TopLevelMenu";
        AutoAnimateChildren = true;
        AutoAnimationIn = [[AutoTarget], [PopIn]];
        AutoAnimationOut = [[AutoTarget], [SinkAway]];
    }
}

// To the server start screen button //
template<> GUIMenuButtonToCollection<"MenuWindow/TopLevelMenu/StartServerButton", StartServerMenu, TopLevelMenu>

// To the server browser screen button //

// To the direct connect screen button //
template<> GUIMenuButtonToCollection<"MenuWindow/TopLevelMenu/ConnectToAddressButton", DirectConnectScreen, TopLevelMenu>

// To the options menu //
//template<> GUIMenuButtonToCollection<"MenuWindow/TopLevelMenu/", , TopLevelMenu>


// Quit the game //
o GuiObject "MenuWindow/TopLevelMenu/QuitGameButton"{
    s{
        [@Listener="OnClick"]
        bool QuitIt(GuiObject@ instance){
            // Close the game //
            GetPongBase().Quit();
            return true;
        }
    @%};
}
// ------------------ Version numbers ------------------ //
o GuiObject "MenuWindow/PongVersion"{
    s{
        [@Listener="OnInit"]
        int SetVersion(GuiObject@ instance, Event@ event){
            // Set the text as the current Pong version //
            
            string newtext = GetPongVersion();
           
            instance.GetTargetElement().SetText(newtext);
            
            return 1;
        }
    @%};
}

o GuiObject "MenuWindow/LeviathanVersion"{
    s{
        [@Listener="OnInit"]
        int SetVersion(GuiObject@ instance, Event@ event){
        
            // Set the text as the current version //
            string newtext = "Leviathan "+GetLeviathanVersion();
            
            instance.GetTargetElement().SetText(newtext);
            
            
            return 1;
        }
    @%};
}
// ------------------ Debug helpers ------------------ //
// The FPS display //
o GuiObject "FPSDisplay"{
    l params{
        
        ListenOn = DATAINDEX_FPS;
    }
    s{
        [@Listener="OnListenUpdate"]
        int UpdateFPS(GuiObject@ instance, Event@ event){
            // The new FPS is the first value //
            ScriptSafeVariableBlock@ newvalue = instance.GetAndPopFirstUpdated();
            if(newvalue is null)
                return 0;
                
            // Set the value //
            instance.GetTargetElement().SetText(string(newvalue));
            
            return 1;
        }
    @%};
}
// ------------------ Server start screen ------------------ //
o GuiCollection "StartServerMenu"{
    l params{
        Enabled = false;
        AutoTarget = "MenuWindow/StartServerMenu";
        AutoAnimateChildren = true;
        AutoAnimationIn = [[AutoTarget], [PopIn]];
        AutoAnimationOut = [[AutoTarget], [SinkAway]];
    }
}


// Normal closing things //
template<> GUIFrameWindowCloseButtonDefault<"MenuWindow/StartServerMenu", "TopLevelMenu", "StartServerMenu">
template<> GUIMenuButtonToCollection<"MenuWindow/StartServerMenu/BackToMainButton", "TopLevelMenu", "StartServerMenu">
// ------------------ Server browser screen ------------------ //
o GuiCollection "ServerBrowserMenu"{
    l params{
        Enabled = false;
        AutoTarget = "MenuWindow/ServerBrowserMenu";
        AutoAnimateChildren = true;
        AutoAnimationIn = [[AutoTarget], [PopIn]];
        AutoAnimationOut = [[AutoTarget], [SinkAway]];
    }
}

// Normal closing things //
template<> GUIFrameWindowCloseButtonDefault<"MenuWindow/ServerBrowserMenu", "TopLevelMenu", "ServerBrowserMenu">
template<> GUIMenuButtonToCollection<"MenuWindow/ServerBrowserMenu/BackToMainButton", "TopLevelMenu", "ServerBrowserMenu">
// ------------------ Direct connect to address screen ------------------ //
o GuiCollection "DirectConnectScreen"{
    l params{
        Enabled = false;
        AutoTarget = "MenuWindow/DirectConnectScreen";
        AutoAnimateChildren = true;
        AutoAnimationIn = [[AutoTarget], [PopIn]];
        AutoAnimationOut = [[AutoTarget], [SinkAway]];
    }
}


// Try to connect //
o GuiObject "MenuWindow/DirectConnectScreen/ConnectButton"{
    s{
        [@Listener="OnClick"]
        bool ConnectIt(GuiObject@ instance){
            // Try to connect //
            string address = instance.GetOwningManager().GetWindowByName(
                "MenuWindow/DirectConnectScreen/ServerAddress").GetText();
            
            string errormessage;
            
            if(!GetPongGame().Connect(address, errormessage)){
                // Display the error //
                instance.GetOwningManager().GetWindowByName(
                    "MenuWindow/DirectConnectScreen/ErrorText").SetText(errormessage);
                return true;
            }
            
            // Change to the connect screen //
            instance.GetOwningManager().SetCollectionState("ConnectionScreen", true);
            instance.GetOwningManager().SetCollectionState("DirectConnectScreen", false);
            instance.GetOwningManager().SetCollectionState("MenuWindow", false);
            return true;
        }
    @%};
}

// Normal closing things //
template<> GUIFrameWindowCloseButtonDefault<"MenuWindow/DirectConnectScreen", "TopLevelMenu", "DirectConnectScreen">
template<> GUIMenuButtonToCollection<"MenuWindow/DirectConnectScreen/BackToMainButton", "TopLevelMenu", "DirectConnectScreen">
// ------------------ Server connection screen ------------------ //
template<> PGCTemplate<ConnectionScreen, "ConnectionScreen", false>

// Connect status message listener //
o GuiObject "ConnectionScreen/Status"{
    s{
        [@Listener="Generic",@Type="ConnectStatusMessage"]
        int ConnectIt(GuiObject@ instance, GenericEvent@ event){
            // Get the message //
            string message = string(event.GetNamedVars().GetSingleValueByName("Message"));
            
            
            // Set it as the current text //
            instance.GetTargetElement().SetText(message);
            return 1;
        }
    @%};
}

// Server name updater //
o GuiObject "ConnectionScreen/ServerName"{
    s{
        [@Listener="Generic",@Type="ServerInfoUpdate"]
        int ConnectIt(GuiObject@ instance, GenericEvent@ event){
            // Get the name //
            string message = string(event.GetNamedVars().GetSingleValueByName("Name"));
            
            
            // Set it as the current text //
            instance.GetTargetElement().SetText(message);
            return 1;
        }
    @%};
}

// The disconnect button //
o GuiObject "ConnectionScreen/DisconnectButton"{
    s{
        [@Listener="OnClick"]
        bool Disconnect(GuiObject@ instance){

            GetPongGame().Disconnect("User pressed Disconnect");
            
            // Change to the main menu //
            instance.GetOwningManager().SetCollectionState("TopLevelMenu", true);
            instance.GetOwningManager().SetCollectionState("MenuWindow", true);
            instance.GetOwningManager().SetCollectionState("ConnectionScreen", false);
            return true;
        }
    @%};
}
// ------------------ Lobby screen objects ------------------ //
template<> PGCTemplate<LobbyScreen, "LobbyScreen", false>


// Lobby screen state request handler //
o GuiObject "_LobbyScreenSetter"{
    s{
        [@Listener="Generic", @Type="LobbyScreenState"]
        int SetStateRight(GuiObject@ instance, GenericEvent@ event){
            // Get the state //
            string statestr = string(event.GetNamedVars().GetSingleValueByName("State"));
            
            if(statestr == "On"){
                // Enable //
                instance.GetOwningManager().SetCollectionState("LobbyScreen", true);
                // This might not be enabled, but it should still tried to be disabled every time //
                instance.GetOwningManager().SetCollectionState("ConnectionScreen", false);
                
            } else {
                
                // Disable //
                instance.GetOwningManager().SetCollectionState("LobbyScreen", false);
            }
            
            return 1;
        }
    @%};
}

// Tab thing //
o GuiObject "LobbyScreen/LobbyTabs"{
    s{
        [@Listener="OnInit"]
        int CreateTabs(GuiObject@ instance, Event@ event){
            
            // Set the texts //
            instance.GetTargetElement().GetChildWindow("__auto_TabPane__Buttons/__auto_btnInfoTab").SetText("Info");
            instance.GetTargetElement().GetChildWindow("__auto_TabPane__Buttons/__auto_btnPlayersTab").SetText("Players");
            
            instance.GetTargetElement().LoadAndCustomizeTabFromFile("PongLobbyTabTemplate.layout", "Team0", "TNumber", "0");
            instance.GetTargetElement().LoadAndCustomizeTabFromFile("PongLobbyTabTemplate.layout", "Team1", "TNumber", "1");
            instance.GetTargetElement().LoadAndCustomizeTabFromFile("PongLobbyTabTemplate.layout", "Team2", "TNumber", "2");
            instance.GetTargetElement().LoadAndCustomizeTabFromFile("PongLobbyTabTemplate.layout", "Team3", "TNumber", "3");
            
            // Fix the size issues //
            instance.GetTargetElement().SetSelectedTabIndex(0);
            
            //instance.PrintWindowsRecursive();
            
            return 1;
        }
    @%};
}


// The exit button //
o GuiObject "LobbyScreen/DisconnectButton"{
    s{
        [@Listener="OnClick"]
        bool Disconnect(GuiObject@ instance){
            
            GetPongGame().Disconnect("User left the lobby");
            
            // Change to the main menu //
            instance.GetOwningManager().SetCollectionState("TopLevelMenu", true);
            instance.GetOwningManager().SetCollectionState("MenuWindow", true);
            return true;
        }
    @%};
}

// The force start button //
o GuiObject "LobbyScreen/StartButton"{
    s{
        [@Listener="OnClick"]
        bool SendStart(GuiObject@ instance){
            
            GetPongGame().SendServerCommand("start");
            return true;
        }
    @%};
}



// Button and text state updater which is updated every time the server sends us a new list of players //
o GuiObject "_LobbyStatusPlayerUpdater"{
    s{
		#include "PongLobbyPlayerUpdater.as"
		
	@%};
}


// Templates for the tabs //
template<TabAndName, TSlotNumber, SplitInt> LobbyJoinOpenButtonThing: 
    o GuiObject "LobbyScreen/LobbyTabs/__auto_TabPane__/TabAndName"{
        s{
            [@Listener="OnClick"]
            bool TryToJoinOrOpen(GuiObject@ instance){
                
                PongBase@ base = GetPongBase();
                
                PlayerSlot@ targetply = base.GetSlot(TSlotNumber);
                
                // Switch to the sub-slot if this is SplitInt //
                if(SplitInt == 1){
                    
                    @targetply = targetply.GetSplit();
                }
                
                // Check is it closed or empty
                if(targetply is null || targetply.GetPlayerType() == PLAYERTYPE_CLOSED){
                    // Open it //
                    GetPongGame().SendServerCommand("open "+TSlotNumber+" "+SplitInt);
                    
                } else if(targetply.GetPlayerType() == PLAYERTYPE_EMPTY){
                    // Join //
                    GetPongGame().SendServerCommand("join "+TSlotNumber+" "+SplitInt);
                    
                } else {
                    // Somebody is in it already, potentially send a chat message here to indicate that or maybe
                    // just disable the button
                    GetPongGame().SendServerCommand("kickslot "+TSlotNumber+" "+SplitInt);
                }
                
                return true;
            }
        @%};
    }

// First team controls //
template<> LobbyJoinOpenButtonThing<"Team0/Player00JoinOpen", 0, 0>
template<> LobbyJoinOpenButtonThing<"Team0/Player01JoinOpen", 0, 1>

// Second Team controls
template<> LobbyJoinOpenButtonThing<"Team1/Player10JoinOpen", 1, 0>
template<> LobbyJoinOpenButtonThing<"Team1/Player11JoinOpen", 1, 1>

// Third team controls //
template<> LobbyJoinOpenButtonThing<"Team2/Player20JoinOpen", 2, 0>
template<> LobbyJoinOpenButtonThing<"Team2/Player21JoinOpen", 2, 1>

// Fourth team controls //
template<> LobbyJoinOpenButtonThing<"Team3/Player30JoinOpen", 3, 0>
template<> LobbyJoinOpenButtonThing<"Team3/Player31JoinOpen", 3, 1>

// ------------------ Prematch screen ------------------ //
template<> PGCTemplate<PrematchScreen, "PrematchScreen", false>

// Prematch screen state request handler //
o GuiObject "_PrematchScreenSetter"{
    s{
        [@Listener="Generic", @Type="PrematchScreenState"]
        int SetStateRight(GuiObject@ instance, GenericEvent@ event){
            // Get the state //
            string statestr = string(event.GetNamedVars().GetSingleValueByName("State"));
            
            if(statestr == "On"){
                // Enable //
                instance.GetOwningManager().SetCollectionState("PrematchScreen", true);

            } else {
                
                // Disable //
                instance.GetOwningManager().SetCollectionState("PrematchScreen", false);
            }
            
            return 1;
        }
    @%};
}


// TODO: server status string
// PrematchScreen/ServerStatus

// The exit button //
o GuiObject "PrematchScreen/DisconnectButton"{
    s{
        [@Listener="OnClick"]
            bool Disconnect(GuiObject@ instance){
            
            GetPongGame().Disconnect("User left the match");
            
            // Change to the main menu //
            instance.GetOwningManager().SetCollectionState("TopLevelMenu", true);
            instance.GetOwningManager().SetCollectionState("MenuWindow", true);
            return true;
        }
        @%};
}





// ------------------ During gameplay objects ------------------ //


// ------------------ Match screen ------------------ //
template<> PGCTemplate<MatchScreen, "MatchScreen", false>


// Match screen state request handler //
o GuiObject "_MatchScreenSetter"{
    s{
        [@Listener="Generic", @Type="MatchScreenState"]
        int SetStateRight(GuiObject@ instance, GenericEvent@ event){
            // Get the state //
            string statestr = string(event.GetNamedVars().GetSingleValueByName("State"));
            
            if(statestr == "On"){
                // Enable //
                instance.GetOwningManager().SetCollectionState("MatchScreen", true);

            } else {
                
                // Disable //
                instance.GetOwningManager().SetCollectionState("MatchScreen", false);
            }
            
            return 1;
        }
    @%};
}


// ------------------ Match end screen objects ------------------ //
template<> PGCTemplate<MatchEndScreen, "", false>

// ------------------ Pause menu objects ------------------ //
o GuiCollection "PauseMenu"{
    l params{
        Enabled = false;
        AllowEnable = false;
        ToggleOn = "ESC";
        AutoTarget = "";
    }
}

