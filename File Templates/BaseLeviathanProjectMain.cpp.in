#include "@ProgramIncludesHeader@"
#include "@ProgramAppHeader@"
#include "@ProgramNetHeader@"
#include "resource.h"

// Breakpad is used to detect and report crashes
#ifdef __linux
#include "client/linux/handler/exception_handler.h"
#elif defined(_WIN32)
#error add the windows breakpad include here
#else
#error no breakpad on platform
#endif

using namespace @ProgramNamespace@;


// Don't look at the mess ahead, just set the variables in your cmake file //
bool DumpCallback(const google_breakpad::MinidumpDescriptor& descriptor, void* context, bool succeeded){
    
    printf("Dump path: %s\n", descriptor.path());
    return succeeded;
}


#ifdef LEVIATHAN_USES_VLD
// visual leak detector //
#include <vld.h>
#endif // LEVIATHAN_USES_VLD

#ifdef _WIN32
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow){
#if defined(DEBUG) | defined(_DEBUG)
    _CrtSetReportMode( _CRT_ASSERT, _CRTDBG_MODE_DEBUG);
#endif

#else
int main(int argcount, char* args[]){
#endif
    
#ifdef _WIN32
    wstring commandline = Convert::StringToWstring(lpCmdLine);
#else
    wstring commandline = L"";
    for(int i = 1; i < argcount; i++){
        commandline += L" "+Leviathan::Convert::CharPtrToWstring(args[i]);
    }
#endif
    
    int Return = 0;
    
#ifdef _WIN32
    HeapSetInformation(NULL, HeapEnableTerminationOnCorruption, NULL, 0);

    if(SUCCEEDED(CoInitialize(NULL))){
#else

#endif

#ifdef LEVIATHAN_USES_VLD
    // now that we are in code we can start tracking //

    VLDEnable();
#endif // LEVIATHAN_USES_VLD

    // Crash handler //
    google_breakpad::MinidumpDescriptor descriptor(
#ifdef _WIN32
        "C://tmp"
#else
        "/tmp"
#endif
    );

    google_breakpad::ExceptionHandler ExceptionHandler(descriptor, NULL, DumpCallback, NULL, true, -1);
        
        
    // create program object //
    @PROGRAMCLASSNAME@ app;
    @PROGRAMNETWORKINGNAME@ network;

    unique_ptr<AppDef> ProgramDefinition(AppDef::GenerateAppdefine(L"@PROGRAMLOG@", L"@ENGINECONFIGURATION@", 
        L"@PROGRAMCONFIGURATION@", L"@PROGRAMKEYCONFIGURATION@", &@PROGRAMCHECKCONFIGFUNCNAME@,
        &@PROGRAMCHECKKEYCONFIGFUNCNAME@));
        
    // customize values //
#ifdef _WIN32
    ProgramDefinition->SetHInstance(hInstance);
#endif
    ProgramDefinition->SetMasterServerParameters(@PROGRAMMASTERSERVERINFO@).SetPacketHandler(&network).SetApplicationIdentification(
        @USERREADABLEIDENTIFICATION@, L"@GAMENAMEIDENTIFICATION@", L"@GAMEVERSIONIDENTIFICATION@");

    // create window last //
    ProgramDefinition->StoreWindowDetails(@WINDOWTITLEGENFUNCTION@, true,
#ifdef _WIN32
        LoadIcon(hInstance, MAKEINTRESOURCE(IDI_ICON1)),
#endif
        &app);

    app.PassCommandLine(commandline);
    
    if(app.Initialize(ProgramDefinition.get())){

        // this is where the game should customize the engine //
        app.CustomizeEnginePostLoad();

        // After everything is ready the command line should be flushed //
        app.FlushCommandLine();


        Logger::Get()->Info(L"Engine successfully initialized", true);
        Return = app.RunMessageLoop();
    } else {
        Logger::Get()->Error(L"App init failed, closing", true);
        app.ForceRelease();
        Return = 5;
    }
#ifdef _WIN32
    }
    //_CrtDumpMemoryLeaks();
    CoUninitialize();
#endif

    return Return;
}
